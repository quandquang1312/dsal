{
	// Place your global snippets here. Each snippet is defined under a snippet name and has a scope, prefix, body and 
	// description. Add comma separated ids of the languages where the snippet is applicable in the scope field. If scope 
	// is left empty or omitted, the snippet gets applied to all languages. The prefix is what is 
	// used to trigger the snippet and the body will be expanded and inserted. Possible variables are: 
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. 
	// Placeholders with the same ids are connected.
	// Example:
	// "Print to console": {
	// 	"scope": "javascript,typescript",
	// 	"prefix": "log",
	// 	"body": [
	// 		"console.log('$1');",
	// 		"$2"
	// 	],
	// 	"description": "Log output to console"
	// }
	"Template": {
		"prefix": "_template",
		"body": [
			"#include <bits/stdc++.h>",
			"using namespace std;",
			"",
			"#define int long long",
			"",
			"int32_t main() {",
				"",
				"\treturn 0;",
			"}"
		]
	},

	"Fenwick Tree": {
		"prefix": "_fenwick_tree",
		"body": [
		  "class FenwickTree {",
		  "public:",
		  "    FenwickTree(int n) {",
		  "        this->n = n;",
		  "        ft.assign(n, 0);",
		  "    }",
		  "",
		  "    FenwickTree(vector<int> arr) : FenwickTree(arr.size()) {",
		  "        for (int i=0; i<arr.size(); i++)",
		  "            add(i, arr[i]);",
		  "    }",
		  "",
		  "    int query(int l, int r) {",
		  "        return sum(r) - sum(l-1);",
		  "    }",
		  "",
		  "    void add(int idx, int vl) {",
		  "        for (; idx < n; idx = idx | (idx + 1))",
		  "            ft[idx] += vl;",
		  "    }",
		  "",
		  "private:",
		  "    vector<int> ft;",
		  "    int n;",
		  "",
		  "private:",
		  "    int g(int i) { return i & (i + 1); }",
		  "    int sum(int i) {",
		  "        int rs = 0;",
		  "        while (i >= 0) {",
		  "            rs += ft[i];",
		  "            i = g(i) - 1;",
		  "        }",
		  "        return rs;",
		  "    }",
		  "};",
		],
		"description": "Segment Tree"
	},

	"Segment Tree": {
		"prefix": "_segment_tree",
		"body": [
		  "#ifndef MAXN",
		  "#define MAXN 200100",
		  "#endif",
		  "",
		  "int arr[MAXN], st[MAXN*4];",
		  "",
		  "void build(int node, int l, int r) {",
		  "    if (l == r) st[node] = arr[l];",
		  "    else {",
		  "        int mid = (l+r) >> 1;",
		  "        build(node*2, l, mid);",
		  "        build(node*2+1, mid+1, r);",
		  "        // for sum segment tree",
		  "        st[node] = st[node*2] + st[node*2+1];",
		  "    }",
		  "}",
		  "",
		  "int query(int node, int l, int r, int tl, int tr) {",
		  "    if (l <= tl && tr <= r) return st[node];",
		  "    if (r < tl || tr < l) return 0; // for sum segment tree",
		  "    int mid = (tl+tr) >> 1;",
		  "    // for sum segment tree",
		  "    return query(node*2, l, r, tl, mid) + query(node*2+1, l, r, mid+1, tr);",
		  "}"
		],
		"description": "Segment Tree"
	},

	"Difference Array": {
		"prefix": "_diff_array",
		"body": [
		  "#ifndef MAXN",
		  "#define MAXN 200100",
		  "#endif",
		  "",
		  "int n, arr[MAXN], diff[MAXN];",
		  "",
		  "void update(int l, int r, int vl) {",
		  "    diff[l] += vl;",
		  "    if (r + 1 < n) diff[r] -= vl;",
		  "}",
		  "",
		  "void apply_update()",
		  "{",
		  "    /*",
		  "    // update the value of arr by the prefix sum of diff",
		  "    */",
		  "    for (int i=0; i<n; i++) diff[i] += diff[i-1];",
		  "    for (int i=0; i<n; i++) arr[i] += diff[i]; ",
		  "}"
		],
		"description": "Difference Array"
	},

	"For loop": {
		"prefix": "_for",
		"body": [
			"for (int i=0; i<n; i++) {}",
		],
		"description": "Loop For"
	},

	"Binary Exponentiation": {
		"prefix": "_binpow",
		"body": [
		  "int binpow(int a, int b, int mod) {",
		  "    if (a == 0) return 0;",
		  "    if (b == 1) return a;",
		  "",
		  "    int res = 1;",
		  "    while (b) {",
		  "        if (b & 1) res = (res * a) % mod;",
		  "        a = a * a % mod;",
		  "        b >>= 1;",
		  "    }",
		  "",
		  "    return res;",
		  "}"
		],
		"description": "Binary Exponentiation"
	},

	"Fast Inout" : {
		"prefix": "_fastinout",
		"body": [
		"ios_base::sync_with_stdio(false);",
		"cin.tie(nullptr); cout.tie(nullptr);"
		],
	},
}
